###
The MIT License (MIT)

Copyright (c) 2014 James M. Bulkowski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
###

### Add your comma separated list of users to downvote here
ie. ["user","someotheruser","yetanother"]
###
badGuys = ["matts2","marx2k","Zifnab25","chiguy","druuconian","mitchwells","phoenix_insurgent","proindrakenzol","pnthrldy"]

### Add your comma separated list of users to upvote here
 ie. ["user","someotheruser","yetanother"]
###
goodGuys = ["throwaway-o","ChaosMotor"]

### Minimum delay between voting attempts ###
delayMin = 500
### Maximum delay between voting attempts ###
delayMax = 2000
### Set this to true and reload a page it runs on to delete all data. Then reset to false. ###
resetData = false;
###Do not edit below, unless you know what you are doing.
########################################################################################################################
if(resetData)
  GM_deleteValue "badGuys"
  GM_deleteValue "goodGuys"


### Bring in some styles ###
$("head").append('<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/themes/redmond/jquery-ui.min.css" type="text/css" />')

### Get values from greasemonkey storage and append them to the in script list ###
populateFromLocalStorage = ->
  if GM_listValues().length
    bgs = GM_getValue("badGuys")
    ggs = GM_getValue("goodGuys")
    badGuys = _.union bgs, badGuys
    goodGuys = _.union ggs, goodGuys
    GM_setValue("badGuys", badGuys)
    GM_setValue("goodGuys", goodGuys)
  else
    GM_setValue("badGuys", badGuys)
    GM_setValue("goodGuys", goodGuys)
populateFromLocalStorage()



choppingBlock = []

addUserDialog = $("""<div id="dialog"></div>""")

listElm = $("""
        <div class='sr-header-area'>
          <div class='sr-list' id='badGuysUI'>
            <ul class='flat-list'>
              <li>The Bad Guys</li><span class='separator'>-</span>
            </ul>
            <span class="badNotification"></span>
          </div>
          <div class='sr-list' id='goodGuysUI'>
            <ul class='flat-list'>
              <li>The Good Guys</li><span class='separator'>-</span>
            </ul>
            <span class="goodNotification"></span>
          </div>
        </div>
        """)

$("document").append(addUserDialog)
newUi = $("#header").append(listElm)

### Bad Guys UI elements###
badGuysInitNotification = "Downvoting users"
badGuysNotificationElm = $("#badGuysUI .badNotification")
badGuysUlElm = $("#badGuysUI ul")

### Good guys Ui elements###
goodGuysInitNotification = "Upvoting users"
goodGuysNotificationElm = $("#goodGuysUI .goodNotification")
goodGuysUlElm = $("#goodGuysUI ul")

# Append a new inline list to the bottom of the header. 
populateUserArray = ->
  console.log "Populating users"
  pushUsers(badGuys,"down",badGuysUlElm)
  pushUsers(goodGuys,"up",goodGuysUlElm)

  badGuysNotificationElm.html(badGuysInitNotification).css(color: "green")
  goodGuysNotificationElm.html(goodGuysInitNotification).css(color: "green")


rePopulate = ->
  console.log "Page state changed. Re running user populator"
  badGuysNotificationElm.html(badGuysInitNotification).css(color: "green")
  goodGuysNotificationElm.html(goodGuysInitNotification).css(color: "green")
  choppingBlock.forEach (user) ->
    arr = $(".author:contains(#{user.user})").closest(".thing").children(".midcol.unvoted").children(".arrow.#{user.direction}")
    user.votes = $.makeArray(arr)
    console.log user
    user.selector.html "<a href='/user/#{user.user}'>#{user.user}: #{user.count}/#{arr.length}</a>"
###
# Iterates through the list generated by populateUserArray()
# clicks on the downvote button, and updates the UI.
###
timeout = null
spinUsers = (delay) ->
  console.time "spinUsers"
  clearTimeout timeout
  timeout = setTimeout (->
    if getUsersWithVotes().length
      ### Select random user with votes remaining ###
      userIndex = getUsersWithVotes()[Math.floor(Math.random() * getUsersWithVotes().length)]
      user = choppingBlock[userIndex]
      if user.votes.length
        $(user.votes.shift()).click()
        user.selector.html "<li data-direction='#{user.direction}' data-username='#{user.user}'><a href='/user/#{user.user}'>#{user.user}: #{user.count}/#{user.votes.length}</a></li>"
        console.log "No more votes for #{user.user}"  unless user.votes.length
        spinUsers randomInt()
      else
        console.log user.user + " is all out of votes"
        spinUsers randomInt()
    else


    badGuysNotificationElm.html("All users downvoted").css(color: "red") if changeStatus("down")
    goodGuysNotificationElm.html("All users upvoted").css(color: "red") if changeStatus("up")
    console.timeEnd "spinUsers"
    console.log delay
  ), delay


###
# Add some event handlers so we can repopulate our data as the page changes.
###
$(document).on "DOMNodeInserted", (event)->
  if (event.target.tagName is "DIV") and (event.target.getAttribute("id") and event.target.getAttribute("id").indexOf("siteTable") isnt -1)
    rePopulate()
    spinUsers randomInt()
    return

###
# Repopulate and rerun when the page loads in additional data.
###
$(document).ajaxComplete ->
  rePopulate()
  spinUsers randomInt()
  return

###
# Repopulate and rerun when a users comments are uncollapsed.
# TODO: this may not be necessary, but Im leaving it in for now.
###
$(".expand").click ->
  rePopulate()
  spinUsers randomInt()
  return

###
# Attach mouseenter handler to usernames on the page, opens dialog to add user to local storage
# In addition, push users onto the chopping block and commence voting.
# TODO: The click handlers could probably be factored into a function. But they are already fairly terse and may not
# Save many lines.
###
addUserTimer = false
$(".author").on("mouseenter", (event)->
  thisUsername = $(this).html()
  addUserTimer = setTimeout (->
    $(addUserDialog).dialog
      title: "Add #{thisUsername} to Vote-O-Matic"
      height: 100
      show: effect: "fade", duration: 300
      hide: effect: "slide", duration: 100
      buttons: [
        {
          text: "GoodGuys"
          click: ->
            newGoodUser = thisUsername
            goodGuys.push newGoodUser
            populateFromLocalStorage()
            pushUsers([newGoodUser], "up", goodGuysUlElm)
            rePopulate()
            spinUsers 200
            $(this).dialog "close"
            return
        }
        {
          text: "Badguys"
          click: ->
            newBadUser = thisUsername
            badGuys.push newBadUser
            populateFromLocalStorage()
            pushUsers([newBadUser], "down", badGuysUlElm)
            rePopulate()
            spinUsers 200
            $(this).dialog "close"
            return
        }
      ]
      position:
        my: "center bottom+10"
        of: event
      open: (event, ui) ->
        $(this).parent().on "mouseleave", =>
          $(this).dialog "close"
  ),400
).on "mouseout", ()->
  clearTimeout addUserTimer
  addUserTimer = false

###
# Add a delegated event handler to the ul>li of usernames and votes.
###
editUserTimer = false
$("ul").on("mouseenter", ".vom-userDisplay", (event)->
  userData = $(this).data()
  thisUsername = $(this).html()
  editUserTimer = setTimeout (->
    $(addUserDialog).dialog
      title: "Edit #{userData.username}"
      height: 100
      show: delay: 50, effect: "fade", duration: 300
      hide: effect: "slide", duration: 100
      buttons: [
        {
          text: "Visit page"
          click: ->
            $(this).dialog "close"
            window.location.href = "/user/#{userData.username}"
            return
        }
        {
          text: "Delete"
          click: ->
            removeUserFromStorage userData
            $(this).dialog "close"
            return
        }
      ]
      position:
        my: "top-20"
        of: event
      open: (event, ui) ->
        $(this).parent().on "mouseleave", =>
          $(this).dialog "close"
  ),400
).on "mouseout", ()->
  clearTimeout editUserTimer
  editUserTimer = false

###
# Returns true if all of the specified groups votes are 0
###
changeStatus = (direction)->
  users  = _.filter choppingBlock, (user)->
    user.direction is direction
  _.every users, (user)->
    (not user.votes.length)

###
# Returns a random interval between delayMin and delayMax
###
randomInt = ->
  Math.floor(Math.random() * (delayMax - delayMin + 1)) + delayMin

###
# Returns an array of array indexes of users with votes remaining.
###
getUsersWithVotes = ->
  votesRemaining = []
  _.map choppingBlock, (user) ->
    votesRemaining.push choppingBlock.indexOf(user)  if user.votes.length
    return

  return votesRemaining

###
# Remove a user from local storage as well as the chopping block.
###
removeUserFromStorage = (user)->
  if user.direction is "down"
    newBadguys = _.without badGuys, user.username
    badGuys = newBadguys
    GM_setValue("badGuys", badGuys)
  if user.direction is "up"
    newGoodguys = _.without goodGuys, user.username
    goodGuys = newGoodguys
    GM_setValue("goodGuys", goodGuys)
  remove = _.find choppingBlock, (u)->
    u.user is user.username
  console.log remove.selector
  remove.selector.remove()
  remove.separator.remove()

  rePopulate()
  spinUsers(200)

###
# Push Users along with their data and selectors onto the chopping block.
###
pushUsers = (UserArray, voteDirection, uiElement)->
  UserArray.forEach (user) ->
    userComments = $(".author:contains(#{user})").closest(".thing").children(".midcol")
    arr = $(".author:contains(#{user})").closest(".thing").children(".midcol.unvoted").children(".arrow.#{voteDirection}")
    elm = $("<li class='vom-userDisplay' data-direction='#{voteDirection}' data-username='#{user}'><a href='/user/#{user}'>#{user}: #{userComments.length}/#{arr.length} </a></li>")
    sep = $("<span class='separator'>-</span>")
    uiElement.append elm
    uiElement.append sep
#    elm.click (event)->
#      event.preventDefault()
#

    choppingBlock.push
      user: user
      votes: $.makeArray(arr)
      count: userComments.length
      selector: elm
      separator: sep
      direction: voteDirection


###
# commence voting
###
populateUserArray()
spinUsers 100
