// Generated by CoffeeScript 1.7.1

/*
The MIT License (MIT)

Copyright (c) 2014 James M. Bulkowski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */


/* Add your comma separated list of users to downvote here
ie. ["user","someotheruser","yetanother"]
 */

(function() {
  var User, addGeneralDialog, addMessageDialog, addUserDialog, addUserTimer, addUserToStorage, badGuys, badGuysInitNotification, badGuysNotificationElm, badGuysUlElm, changeStatus, choppingBlock, delayMax, delayMin, editUserTimer, getUsersWithVotes, goodGuys, goodGuysInitNotification, goodGuysNotificationElm, goodGuysUlElm, listElm, localServer, newUi, openMessageModal, populateUserArray, pushUsers, randomInt, rePopulate, removeUserFromStorage, resPinnedHeaderFix, resetData, spinUsers, template, timeout;

  badGuys = [];


  /* Add your comma separated list of users to upvote here
   ie. ["user","someotheruser","yetanother"]
   */

  goodGuys = [];


  /* Minimum delay between voting attempts */

  delayMin = 500;


  /* Maximum delay between voting attempts */

  delayMax = 2000;


  /* Set this to true and reload a page it runs on to delete all data. Then reset to false. */

  resetData = false;


  /*Do not edit below, unless you know what you are doing.
   */

  localServer = chrome.runtime.connect({
    name: "client"
  });

  template = window.vomTemplates;


  /* Bring in some styles */

  $("head").append('<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/themes/redmond/jquery-ui.min.css" type="text/css" />');

  choppingBlock = [];

  addUserDialog = template.userDialog;

  addMessageDialog = template.messageDialog;

  addGeneralDialog = template.generalDialog;

  listElm = template.mainElm;

  $("document").append(addUserDialog);

  $("document").append(addMessageDialog);

  newUi = $("#header").append(listElm);


  /* Bad Guys UI elements */

  badGuysInitNotification = "Downvoting users";

  badGuysNotificationElm = $("#badGuysUI .badNotification");

  badGuysUlElm = $("#badGuysUI ul");


  /* Good guys Ui elements */

  goodGuysInitNotification = "Upvoting users";

  goodGuysNotificationElm = $("#goodGuysUI .goodNotification");

  goodGuysUlElm = $("#goodGuysUI ul");

  populateUserArray = function() {
    console.log("Populating users");
    pushUsers(badGuys, "down", badGuysUlElm);
    pushUsers(goodGuys, "up", goodGuysUlElm);
    badGuysNotificationElm.html(badGuysInitNotification).css({
      color: "green"
    });
    return goodGuysNotificationElm.html(goodGuysInitNotification).css({
      color: "green"
    });
  };

  rePopulate = function() {
    console.log("Page state changed. Re running user populator");
    badGuysNotificationElm.html(badGuysInitNotification).css({
      color: "green"
    });
    goodGuysNotificationElm.html(goodGuysInitNotification).css({
      color: "green"
    });
    return choppingBlock.forEach(function(user) {
      var arr;
      arr = $(".author:contains(" + user.user + ")").closest(".thing").children(".midcol.unvoted").children(".arrow." + user.direction);
      user.votes = $.makeArray(arr);
      return user.selector.html("<a href='/user/" + user.user + "'>" + user.user + ": " + user.count + "/" + arr.length + "</a>");
    });
  };


  /*
   * Iterates through the list generated by populateUserArray()
   * clicks on the downvote button, and updates the UI.
   */

  timeout = null;

  spinUsers = function(delay) {
    console.time("spinUsers");
    clearTimeout(timeout);
    return timeout = setTimeout((function() {
      var user, userIndex;
      if (getUsersWithVotes().length) {

        /* Select random user with votes remaining */
        userIndex = getUsersWithVotes()[Math.floor(Math.random() * getUsersWithVotes().length)];
        user = choppingBlock[userIndex];
        if (user.votes.length) {
          user.vote();
          return spinUsers(randomInt());
        } else {
          console.log(user.user + " is all out of votes");
          return spinUsers(randomInt());
        }
      } else {
        if (changeStatus("down")) {
          badGuysNotificationElm.html("All users downvoted").css({
            color: "red"
          });
        }
        if (changeStatus("up")) {
          goodGuysNotificationElm.html("All users upvoted").css({
            color: "red"
          });
        }
        console.timeEnd("spinUsers");
        return console.log(delay);
      }
    }), delay);
  };


  /*
   * Add some event handlers so we can repopulate our data as the page changes.
   */

  $(document).on("DOMNodeInserted", function(event) {
    if ((event.target.tagName === "DIV") && (event.target.getAttribute("id") && event.target.getAttribute("id").indexOf("siteTable") !== -1)) {
      rePopulate();
      spinUsers(randomInt());
    }
  });


  /*
   * Repopulate and rerun when the page loads in additional data.
   */

  $(document).ajaxComplete(function() {
    rePopulate();
    spinUsers(randomInt());
  });


  /*
   * Repopulate and rerun when a users comments are uncollapsed.
   * TODO: this may not be necessary, but Im leaving it in for now.
   */

  $(".expand").click(function() {
    rePopulate();
    spinUsers(randomInt());
  });


  /*
   *This is a bit of a hacky fix for RES pinned header
   */

  resPinnedHeaderFix = function() {
    var headerHeight;
    headerHeight = $("#header").height();
    return $("#RESPinnedHeaderSpacer").css("height", headerHeight);
  };

  $(window).resize(function(event) {
    return resPinnedHeaderFix();
  });


  /*
   * Attach mouseenter handler to usernames on the page, opens dialog to add user to local storage
   * In addition, push users onto the chopping block and commence voting.
   * TODO: The click handlers could probably be factored into a function. But they are already fairly terse and may not
   * Save many lines.
   */

  addUserTimer = false;

  $(".author").on("mouseenter", function(event) {
    var thisUsername;
    thisUsername = $(this).html();
    return addUserTimer = setTimeout((function() {
      return $(addUserDialog).dialog({
        title: "Add " + thisUsername + " to Vote-O-Matic",
        height: 100,
        show: {
          effect: "fade",
          duration: 300
        },
        hide: {
          effect: "slide",
          duration: 100
        },
        buttons: [
          {
            text: "GoodGuys",
            click: function() {
              addUserToStorage(thisUsername, "goodGuys");
              $(this).dialog("close");
            }
          }, {
            text: "Badguys",
            click: function() {
              addUserToStorage(thisUsername, "badGuys");
              $(this).dialog("close");
            }
          }
        ],
        position: {
          my: "center bottom+10",
          of: event
        },
        open: function(event, ui) {
          return $(this).parent().on("mouseleave", (function(_this) {
            return function() {
              return $(_this).dialog("close");
            };
          })(this));
        }
      });
    }), 400);
  }).on("mouseout", function() {
    clearTimeout(addUserTimer);
    return addUserTimer = false;
  });


  /*
   * Add a delegated event handler to the ul>li of usernames and votes.
   */

  editUserTimer = false;

  $(".vom-inlineList").on("mouseenter", ".vom-userDisplay", function(event) {
    var thisUsername, userData;
    console.log("mousein");
    userData = $(this).data();
    thisUsername = $(this).html();
    return editUserTimer = setTimeout((function() {
      return $(addUserDialog).dialog({
        title: "Edit " + userData.username,
        height: 100,
        show: {
          delay: 50,
          effect: "fade",
          duration: 300
        },
        hide: {
          effect: "slide",
          duration: 100
        },
        buttons: [
          {
            text: "Visit page",
            click: function() {
              $(this).dialog("close");
              window.location.href = "/user/" + userData.username;
            }
          }, {
            text: "Delete",
            click: function() {
              removeUserFromStorage(userData);
              $(this).dialog("close");
            }
          }
        ],
        position: {
          my: "top-20",
          of: event
        },
        open: function(event, ui) {
          return $(this).parent().on("mouseleave", (function(_this) {
            return function() {
              return $(_this).dialog("close");
            };
          })(this));
        }
      });
    }), 400);
  }).on("mouseout", function() {
    console.log("mouseout");
    clearTimeout(editUserTimer);
    return editUserTimer = false;
  });

  $("#vom-help").click(function(event) {
    var Open, height, width, win;
    event.preventDefault();
    Open = $(addGeneralDialog);
    Open.html(template.helpText);
    win = $(window);
    width = win.width() * .40;
    height = win.height() * .40;
    return Open.dialog({
      title: "Vote-O-Matic Help",
      width: width,
      height: height,
      position: "top",
      show: {
        effect: "fade",
        duration: 300
      },
      hide: {
        effect: "slide",
        duration: 300
      }
    });
  });

  $("#vom-about").click(function(event) {
    var Open, height, width, win;
    event.preventDefault();
    Open = $(addGeneralDialog);
    Open.html(template.aboutText);
    win = $(window);
    width = win.width() * .40;
    height = win.height() * .40;
    return Open.dialog({
      title: "About Vote-O-Matic",
      width: width,
      height: height,
      position: "top",
      show: {
        effect: "fade",
        duration: 300
      },
      hide: {
        effect: "slide",
        duration: 300
      }
    });
  });


  /*
   * Returns true if all of the specified groups votes are 0
   */

  changeStatus = function(direction) {
    var users;
    users = _.filter(choppingBlock, function(user) {
      return user.direction === direction;
    });
    return _.every(users, function(user) {
      return !user.votes.length;
    });
  };


  /*
   * Returns a random interval between delayMin and delayMax
   */

  randomInt = function() {
    return Math.floor(Math.random() * (delayMax - delayMin + 1)) + delayMin;
  };


  /*
   * Returns an array of array indexes of users with votes remaining.
   */

  getUsersWithVotes = function() {
    var votesRemaining;
    votesRemaining = [];
    _.map(choppingBlock, function(user) {
      if (user.votes.length) {
        votesRemaining.push(choppingBlock.indexOf(user));
      }
    });
    return votesRemaining;
  };


  /*
   * Add a user to local storage.
   */

  addUserToStorage = function(user, group) {
    return localServer.postMessage({
      command: "addUser",
      data: {
        username: user,
        group: group
      }
    });
  };


  /*
   * Remove a user from local storage as well as the chopping block.
   */

  removeUserFromStorage = function(user) {
    var newBadguys, newGoodguys, remove;
    console.log(user);
    if (user.direction === "down") {
      localServer.postMessage({
        command: "deleteUser",
        data: {
          username: user.username,
          group: "badGuys"
        }
      });
      newBadguys = _.without(badGuys, user.username);
      badGuys = newBadguys;
    }
    if (user.direction === "up") {
      localServer.postMessage({
        command: "deleteUser",
        data: {
          username: user.username,
          group: "goodGuys"
        }
      });
      newGoodguys = _.without(goodGuys, user.username);
      goodGuys = newGoodguys;
    }
    remove = _.find(choppingBlock, function(u) {
      return u.user === user.username;
    });
    console.log(remove.selector);
    remove.selector.remove();
    remove.separator.remove();
    rePopulate();
    return spinUsers(200);
  };


  /*
   * Push Users along with their data and selectors onto the chopping block.
   */

  User = window.vomUser;

  pushUsers = function(UserArray, voteDirection, uiElement) {
    return UserArray.forEach(function(user) {
      return choppingBlock.push(new User(user, voteDirection, uiElement));
    });
  };

  openMessageModal = function(message, title) {
    $(addMessageDialog).html("<h1>" + message + "</h1>");
    return $(addMessageDialog).dialog({
      title: title,
      height: 100,
      show: {
        effect: "fade",
        duration: 300
      },
      hide: {
        effect: "fade",
        duration: 300
      },
      open: function() {
        return setTimeout(((function(_this) {
          return function() {
            return $(_this).dialog("close");
          };
        })(this)), 2500);
      }
    });
  };


  /*
   * commence voting
   */

  localServer.postMessage({
    command: "ready",
    data: null
  });

  localServer.onMessage.addListener(function(msg) {
    var tempElement;
    switch (msg.command) {
      case "Initialize":
        goodGuys = msg.data.goodGuys;
        badGuys = msg.data.badGuys;
        populateUserArray();
        spinUsers(100);
        return resPinnedHeaderFix();
      case "newUserAdded":
        tempElement = msg.data.direction === "up" ? {
          elm: goodGuysUlElm,
          arr: goodGuys
        } : {
          elm: badGuysUlElm,
          arr: badGuys
        };
        tempElement.arr.push(msg.data.username);
        pushUsers([msg.data.username], msg.data.direction, tempElement.elm);
        openMessageModal("User Added.", "Success");
        rePopulate();
        return spinUsers(200);
      case "userDeleted":
        return openMessageModal("User Deleted.", "Success");
      case "Error":
        return openMessageModal(msg.message, "Error");
    }
  });

}).call(this);
