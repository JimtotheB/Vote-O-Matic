// Generated by CoffeeScript 1.7.1
(function() {
  var addNewUser, deleteAllUsers, deleteUser, initStorage, uniqueUser;

  chrome.runtime.onConnect.addListener(function(port) {
    console.log("client connected");
    console.assert(port.name === "client");
    port.onMessage.addListener(function(msg) {
      switch (msg.command) {
        case "ready":
          return initStorage(function(data) {
            return port.postMessage({
              command: "Initialize",
              data: {
                badGuys: data.badGuys,
                goodGuys: data.goodGuys
              }
            });
          });
        case "addUser":
          return addNewUser(msg.data.username, msg.data.group, function(command, user, dir, message) {
            return port.postMessage({
              command: command,
              message: message,
              data: {
                username: user,
                direction: dir
              }
            });
          });
        case "deleteUser":
          return deleteUser(msg.data.username, msg.data.group, function(message) {
            return port.postMessage({
              command: "userDeleted",
              message: message
            });
          });
        case "deleteAllUsers":
          return deleteAllUsers(function(message) {
            return port.postMessage({
              command: "AllDataDeleted",
              message: message
            });
          });
      }
    });
  });

  uniqueUser = function(username, cb) {
    var s;
    s = chrome.storage.local;
    return s.get("goodGuys", function(good) {
      return s.get("badGuys", function(bad) {
        return typeof cb === "function" ? cb(!_.contains(good.goodGuys, username || !_.contains(bad.badGuys, username))) : void 0;
      });
    });
  };

  addNewUser = function(username, group, cb) {
    var direction, s;
    if (group === "goodGuys" || "badGuys") {
      s = chrome.storage.local;
      direction = group === "goodGuys" ? "up" : "down";
      return s.get(group, function(result) {
        return uniqueUser(username, function(unique) {
          var temp;
          if (unique) {
            console.log(unique);
            result[group].push(username);
            temp = {};
            temp[group] = result[group];
            s.set(temp);
            return typeof cb === "function" ? cb("newUserAdded", username, direction, "User added") : void 0;
          } else {
            return typeof cb === "function" ? cb("Error", null, null, "User already saved") : void 0;
          }
        });
      });
    }
  };

  deleteUser = function(username, group, cb) {
    var s;
    s = chrome.storage.local;
    return s.get(group, function(result) {
      var removed, temp;
      removed = _.without(result[group], username);
      temp = {};
      temp[group] = removed;
      s.set(temp);
      return typeof cb === "function" ? cb("User deleted.") : void 0;
    });
  };

  deleteAllUsers = function(cb) {
    var s;
    s = chrome.storage.local;
    return s.set({
      badGuys: []
    }, function() {
      return s.set({
        goodGuys: []
      }, function() {
        if (!chrome.runtime.lastError) {
          return typeof cb === "function" ? cb("All data successfully deleted, please reload all reddit tabs.") : void 0;
        } else {
          return typeof cb === "function" ? cb("Sorry there seems to have been an error.") : void 0;
        }
      });
    });
  };

  initStorage = function(cb) {
    var data, s;
    data = {};
    s = chrome.storage.local;
    return s.get("badGuys", function(r) {
      if (!Object.getOwnPropertyNames(r).length) {
        s.set({
          badGuys: []
        });
        s.get("badGuys", function(r) {
          return data.badGuys = r.badGuys;
        });
      } else {
        data.badGuys = r.badGuys;
      }
      return s.get("goodGuys", function(r) {
        if (!Object.getOwnPropertyNames(r).length) {
          s.set({
            goodGuys: []
          });
          return s.get("goodGuys", function(r) {
            data.goodGuys = r.goodGuys;
            return typeof cb === "function" ? cb(data) : void 0;
          });
        } else {
          data.goodGuys = r.goodGuys;
          return typeof cb === "function" ? cb(data) : void 0;
        }
      });
    });
  };

}).call(this);
